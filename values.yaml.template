# ------------------------------------------------------------------------------
# Kafka:
# ------------------------------------------------------------------------------

## The StatefulSet installs 3 pods by default
replicas: ${component.kafka.replicas}

## The kafka image tag
imageTag: ${component.kafka.version}  # Confluent image for Kafka 2.0.0

kafkaHeapOptions: "-Xmx${component.kafka.heapSize} -Xms${component.kafka.heapSize}"

## Headless service.
##
headless:
  port: ${component.kafka.port}

## Persistence configuration. Specify if and how to persist data to a persistent volume.
##
persistence:
## The size of the PersistentVolume to allocate to each Kafka Pod in the StatefulSet. For
## production servers this number should likely be much larger.
##
  size: ${component.kafka.volumeSize}

## Topic creation and configuration.
## The job will be run on a deployment only when the config has been changed.
## - If 'partitions' and 'replicationFactor' are specified we create the topic (with --if-not-exists.)
## - If 'partitions', 'replicationFactor' and 'reassignPartitions' are specified we reassign the partitions to
## increase the replication factor of an existing topic.
## - If 'partitions' is specified we 'alter' the number of partitions. This will
## silently and safely fail if the new setting isnâ€™t strictly larger than the old (i.e. a NOOP.) Do be aware of the
## implications for keyed topics (ref: https://docs.confluent.io/current/kafka/post-deployment.html#admin-operations)
## - If 'defaultConfig' is specified it's deleted from the topic configuration. If it isn't present,
## it will silently and safely fail.
## - If 'config' is specified it's added to the topic configuration.
##
## Note: To increase the 'replicationFactor' of a topic, 'reassignPartitions' must be set to true (see above).
##
topics:
  - name: ${component.kafka.topicName}
    config: ${component.kafka.topicConfig}
    defaultConfig: ${component.kafka.topicDefaultConfig}
    partitions: ${component.kafka.topicPartitions}
    replicationFactor: ${component.kafka.topicReplicationFactor}
