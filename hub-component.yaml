# -------------------------------------------------------------------------------------------------------
# This is Automation Hub Manifest example that describes a Custom Component
# -------------------------------------------------------------------------------------------------------
#
# The manifest tells the Hub where to obtain dependencies, parameters, source blob locations,
# and available lifecycle actions (the verbs) from.

version: 1
kind: component
meta:
name: kafka
source:
  dir: .

# Verbs are delegated to actions implemented in the components source code.
# Supported actions are: Shell, Terraform, Make, Docker, Chef, Ansible.
# In this example the component is implemented in Make.
lifecycle:
  verbs: [deploy, undeploy]

# Requires block describes dependencies, that must be satisfied before the component can be deployed.
# The dependencies are provided by the platform or upstream components.
# To deploy Kafka, Kubernetes and a server-side component of Helm (Tiller) must be present on
# the platform.
requires:
  - kubernetes
  - tiller

# Provides block describes a capability, that the current component provides.
# Potential downstream components might require this capability in order to deploy properly.
provides:
  - kafka

# Parameters are used to setup component deployment workspace and for parameter substitution in
# configuration files
parameters:
  - name: dns.domain
    env: DOMAIN_NAME
  - name: component.kafka
    parameters:
      - name: version
        value: 5.0.1
      - name:  name
        value: kafka-${dns.name}
        env:   COMPONENT_NAME
      - name:  namespace
        value: kafka
        env:   NAMESPACE
      - name:  volumeSize
        value: 8Gi
      - name:  heapSize
        value: 1G
      - name:  storageClass
        value: default
      - name:  port
        value: 9092
      - name: replicas
        value: 3
      - name: topicName
        value: default
      - name: topicConfig
        value: "cleanup.policy=compact,delete.retention.ms=604800000"
      - name: topicDefaultConfig
        value: "segment.bytes,segment.ms"
      - name: topicPartitions
        value: 3
      - name: topicReplicationFactor
        value: ${component.kafka.replicas}

# After the component is deployed the output variables are captured from a well-known locations
# in the Workspace. The output variables can be referenced in parameters of downstream components
outputs:
  - name: component.kafka.host
    value: ${component.kafka.name}-kafka.${component.kafka.namespace}.svc.cluster.local
  - name: component.kafka.port
  - name: component.kafka.namespace

# Locations of template files
templates:
  files:
    - "*.template"
